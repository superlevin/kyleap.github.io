[{"title":"在ASP.NET利用Hangfire搭配SQL Server來管理排程作業","date":"2017-07-24T16:34:28.000Z","path":"2017/07/25/hangfire-sql-server/","text":"前言在以往寫.NET排程需求時，我通常會用Console Application 搭配 Windows Server的排程器來做設定，最近嘗試在專案使用 hangfire 來做管理，hangfire 是一套open source的Freamwork，它能很容易的管理背景作業，並且有 Dashboard 介面來查看作業狀態及執行，本篇文章將以ASP.NET專案搭配SQL Server做個安裝筆記。 Nuget 安裝套件 Hangfire.core https://www.nuget.org/packages/Hangfire.Core/ Hangfire.SqlServer https://www.nuget.org/packages/Hangfire.SqlServer/ Create DB Schema 存在Jobs的資料在方案nuget package裡的Hangfire.SqlServer資料夾，應會有所需Table的Script 執行安裝後應該會有底下這些 Table 專案設定在ASP.NET專案的 Startup.cs 檔案引入hangfire 123456789101112131415161718public void Configuration(IAppBuilder app)&#123; GlobalConfiguration.Configuration.UseSqlServerStorage ( \"hangfire-sqlserver\", new SqlServerStorageOptions &#123; // if it is set to 1 minutes, each worker will run a keep-alive query each minute when processing a job QueuePollInterval = TimeSpan.FromMinutes(1) &#125; ); // 啟用HanfireServer app.UseHangfireServer(new BackgroundJobServerOptions &#123; WorkerCount = 1 &#125;); RecurringJob.AddOrUpdate&lt;SendMessageAlert&gt;(\"SendMessageAlert\", x =&gt; x.SendMessage(), Cron.MinuteInterval(1), TimeZoneInfo.FindSystemTimeZoneById(\"Taipei Standard Time\"));&#125; SendMessageAlert 是一個自己建立的類別，可以將排程實際的所需的實作寫在裡面，譬如實務上很常發送排程E-mail通知信件，而以此例我們設定排程頻率為1分鐘執行一次，視實際情況可以調整為 Daily Hourly Monthly Weekly Yearly 12345678public class SendMessageAlert&#123; public void SendMessage() &#123; // TODO:發送排程信件 Console.WriteLine(DateTime.Now); &#125;&#125; 到此步驟可以執行看看，每分鐘應該會進入SendMessage Method 加入 Dashboard回到 Startup.cs，只要加入以下程式即可開啟Dashboard功能 12345// 開啟Hangfire的Dashboardapp.UseHangfireDashboard(\"/hangfire\", new DashboardOptions&#123; Authorization = new[] &#123; new HangfireAuthorizationFilter() &#125;&#125;); 當然這個Dashboard我們不希望能讓任何人能存取，所以能自訂一個 HangfireAuthorizationFilter 來驗證是否有存取權限 123456789101112131415public class HangfireAuthorizationFilter : IDashboardAuthorizationFilter&#123; public bool Authorize([NotNull] DashboardContext context) &#123; // 是否允許存取hangfire Dashboard if (HttpContext.Current.User.IsInRole(\"Admin\")) &#123; return true; &#125; else &#123; return false; &#125; &#125;&#125; 結果圖數據分析 排程紀錄，也可手動執行 參考連結 http://blog.kkbruce.net/2015/09/hangfire-aspnet-mvc-webapi.html#.WXYg84iGOUk https://dotblogs.com.tw/rainmaker/2015/08/19/153169","tags":[{"name":"ASP.NET","slug":"ASP-NET","permalink":"//litten.me/tags/ASP-NET/"},{"name":"HangFire","slug":"HangFire","permalink":"//litten.me/tags/HangFire/"}]},{"title":"Github Page Hello World","date":"2017-07-23T10:25:59.012Z","path":"2017/07/23/my-first-helloworld/","text":"聽說任何第一個專案不寫 Hello Wold會出事的，所以此篇就當個開頭吧 :)我的舊Blog連結: http://kyleap.blogspot.tw/ 123console.log('Hello World !!');console.log('Hello World !!');console.log('Hello World !!');","tags":[{"name":"碎碎念","slug":"碎碎念","permalink":"//litten.me/tags/碎碎念/"}]}]